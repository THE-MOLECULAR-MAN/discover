Git


# Setup your identity and suppress warnings.

git config --global user.name "Lee Baird"
git config --global user.email "leebaird@acme.com"
git config --global pull.rebase false
------------------------------------------------------------------------------------------------------------------------------------------------------

# Configure a proxy.

git config --global http.proxy http://proxy:port
------------------------------------------------------------------------------------------------------------------------------------------------------

# Fork a repo using your web browser.

# Clone the new fork.
    git clone https://github.com/<username>/<forked repo>
    git clone https://github.com/leebaird/shad0w.git
    cd shad0w/

# Add the upstream repo so that you can pull changes.
    git remote add upstream https://github.com/<original repo>
    git remote add upstream https://github.com/bats3c/shad0w.git

# Stop errors pushing changes.
    git remote set-url origin https://github.com/<username>/<fork>
    git remote set-url origin https://github.com/leebaird/shad0w.git

# Validate connectivity.
    ssh -T git@github.com
------------------------------------------------------------------------------------------------------------------------------------------------------

# Working on a new branch.

Always avoid working on the master branch. It usually results in merge conflicts and/or update issues.
Instead, work on dev branch whenever possible.

    # Check the status.
    git status

    # Show local branches.
    git branch

    # Show remote branches.
    git branch -r

    # Create a new local branch and checkout.
    git checkout -b <new branch>
------------------------------------------------------------------------------------------------------------------------------------------------------

# Keep your fork updated.

Once your fork has been created, it does not automatically track with the upstream repo.

    # Pull the latest changes from upstream.
    git fetch upstream

    # Make sure you are working on the master branch.
    git checkout master

    # Merge the latest upstream changes.
    git merge upstream/master

    # Add any edited files.
    git add <file1> <file2>

    # Add commit message.
    git commit -am 'message'

    # Push the new changes to your fork.
    git push origin master
    You will need to authenticate.

Refresh your web browser to see the changes.
--------------------------------------------------------------------------------------------------------------------------------------    ----------------

    # Return to your dev branch.
    git checkout dev

    # Rebase this branch into the latest code from the master banch. Expect conflicts.
    git rebase master

    # Resolve conflicts.

    # Push the rebased branch back to your fork.
    git push origin dev -f

    # Restore any un-committed changes.
    git stash
------------------------------------------------------------------------------------------------------------------------------------------------------

# Submit a pull request.

    Update your branch and make sure you are rebased off the latest upstream/master.
    Squash your commits onto a single revision.
    With your web browser click on Pull request > Create pull request 2x
------------------------------------------------------------------------------------------------------------------------------------------------------

# Delete local and remote branches.

    # Local
    git branch -D <branch>

    # Remote
    git push origin --delete <branch>

